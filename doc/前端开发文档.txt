闸机系统开发手册

1.  vue init webpack gatesystem
    输入相应信息
    使用router 开启eslint

2.  安装依赖包
    npm i element-ui -D -d   # i => install -D => --save-dev
    npm i axios -D -d
    npm i echarts -D -d
    npm i vuex -D -d
    npm i js-base64 -D -d
    npm i less less-loader -D -d
    npm i font-awesome -D -d

3.  使用依赖包
    #############################################################
    使用element-ui
        ﹂src
            ﹂main.js

            import ElementUI from 'element-ui'
            import 'element-ui/lib/theme-chalk/index.css'

            new Vue({
              el: '#app',
              router,
              store,
              echarts,
              components: { App },
              template: '<App/>'
            })
            Vue.use(ElementUI)

    ################################################################
    使用 axios
        ﹂src
            ﹂main.js

            import axios from 'axios'
            请求拦截
                // 添加请求拦截器
                    axios.interceptors.request.use(function (config) {
                        // 在发送请求之前做些什么
                        return config
                    }, function (error) {
                        // 对请求错误做些什么
                        return Promise.reject(error)
                    })
                // 添加响应拦截器
                    axios.interceptors.response.use(function (response) {
                        // 对响应数据做点什么
                        return response
                    }, function (error) {
                        // 对响应错误做点什么
                         return Promise.reject(error)
                    })
            Vue.prototype.$http = axios
    #################################################################
    使用echart
        ﹂src
            ﹂main.js
            import echarts from 'echarts'
            Vue.prototype.echarts = echarts

        new Vue({
            el: '#app',
            router,
            store,
            echarts,
            components: { App },
            template: '<App/>'
        })
    ################################################################
    使用vuex
        ﹂src
            ﹂store # 创建文件夹
                ﹂store.js # 创建该文件

                import Vue from 'vue'
                import Vuex from 'vuex'
                import mutations from './mutations'  #引入文件
                Vue.use(Vuex)

                export default new Vuex.Store({
                  state: {
                    count: 0
                  },
                  mutations
                })
        ﹂src
            ﹂store # 创建文件夹
                ﹂mutations.js # 创建该文件

                const mutations = {
                    addition: state => state.count++,
                    minus: state => state.count--,
                    setZero: state => {
                      state.count = 0
                    }
                }
                export default mutations
    ################################################################
    使用base64 (上传图片，本地显示)
        ﹂src
          ﹂main.js
        Vue.prototype.Base64 = require('js-base64').Base64
        语法
            this.Base64.encode('小飼弾');    // 5bCP6aO85by+
            this.Base64.encodeURI('小飼弾'); // 5bCP6aO85by-

            this.Base64.decode('5bCP6aO85by+');  // 小飼弾
            // note .decodeURI() is unnecessary since it accepts both flavors
            this.Base64.decode('5bCP6aO85by-');  // 小飼弾
    ################################################################
    使用less
        ﹂src
            ﹂webpack.base.conf.js

            {
                test: /\.less$/,
                loader: "style-loader!css-loader!less-loader"
             }
    ################################################################
    使用路由卫士(为了防止路由随意输入而设置错误返回)
        ﹂src
            ﹂router
                ﹂index.js

            import Vue from 'vue'
            import Router from 'vue-router'
            import login from '@/components/login'
            Vue.use(Router)
            let routes = [
              {path: '/login',name: 'login',component: login}
            ]
            const router = new Router({
              history: true,
              routes: routes
            })
            router.beforeEach((to, from, next) => {  // 错误返回
              if (to.matched.length === 0) {
                from.name ? next({ name: from.name }) : next('/login')
              } else {
                next()
              }
            })
            export default router
    #################################################################
    使用图标字体font-awesome
        ﹂src
          ﹂main.js

        import 'font-awesome/css/font-awesome.min.css'

4.  代理设置
        ﹂config
           ﹂index.js

              module.exports = {
                  dev: {
                    // Paths
                    assetsSubDirectory: 'static',
                    assetsPublicPath: '/',
                    proxyTable: { // 跨域配置代理
                      '/controller/': {
                        target: 'http://10.10.97.202',
                        changeOrigin: true,
                        pathRewrite: {
                          '^/controller': '/controller'
                        }
                      },
                      '/store/': {
                        target: 'http://10.10.97.202',
                        changeOrigin: true,
                        pathRewrite: {
                          '^/store': '/store'
                        }
                      }
                    },
                    host: '0.0.0.0', // 让项目让别的电脑也可以访问
            改完后,重启项目    npm run dev

5.  发布项目
    修改发布路径
    ﹂config
        ﹂index.js
        build: {
            // Template for index.html
            index: path.resolve(__dirname, '../../facegateCompiled/index.html'), # 原始的 ../dist

            // Paths
            assetsRoot: path.resolve(__dirname, '../../facegateCompiled'),       # 原始的 ../dist
            assetsSubDirectory: 'static',
            assetsPublicPath: '/',

    npm run build

